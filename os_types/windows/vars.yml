---
packer_windows_unattended_file: 'files/{{ packer_options.image }}/Autounattend.xml'
packer_windows_unattended_path: '{{ packer_dest }}/{{ packer_windows_unattended_file }}'
packer_windows_user_data_file: 'files/{{ packer_name }}_user_data.txt'
packer_windows_user_data_path: '{{ packer_dest }}/{{ packer_windows_user_data_file }}'

packer_windows_temp_password: 'ThisIsATemporaryPassword!ItWillBeChangedDuringInstallation!'

packer_windows_initialize:
  - type: 'powershell'
    only: ['azure']
    elevated_user: 'packer'
    elevated_password: '[[ .WinRMPassword ]]'
    script: '[[template_dir]]/files/Install-WMF51.ps1'
  - type: 'powershell'
    only: ['amazon']
    elevated_user: 'Administrator'
    elevated_password: '[[ .WinRMPassword ]]'
    script: '[[template_dir]]/files/Install-WMF51.ps1'
  - type: 'powershell'
    only: ['virtualbox']
    elevated_user: 'Administrator'
    elevated_password: '{{ packer_windows_temp_password }}'
    script: '[[template_dir]]/files/Install-WMF51.ps1'
  - type: 'windows-restart'

packer_windows_guest_tools:
  - type: 'powershell'
    only: ['virtualbox']
    inline:
      - 'Start-Process -FilePath "E:\cert\VBoxCertUtil.exe" -ArgumentList ("add-trusted-publisher", "vbox*.cer", "--root", "vbox*.cer") -Wait -WorkingDirectory E:\cert'
      - 'Start-Process -FilePath "E:\VBoxWindowsAdditions.exe" -ArgumentList "/S" -Wait'
  - type: 'windows-restart'
    only: ['virtualbox']

packer_windows_cleanup:
  - type: 'powershell'
    script: '[[template_dir]]/files/Cleanup.ps1'
  - type: "powershell"
    only: ['azure', 'aws']
    inline:
      - '& $env:SystemRoot\System32\Sysprep\Sysprep.exe /oobe /generalize /quiet /quit'
      - 'while($true) { $imageState = Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Setup\State | Select ImageState; if($imageState.ImageState -ne "IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE") { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }'

  - type: "powershell"
    only: ['virtualbox']
    inline:
      - '$computer = Get-WmiObject -Class Win32_ComputerSystem -EnableAllPrivileges; $computer.AutomaticManagedPagefile = $false; $computer.Put()'
      - '@(Get-WmiObject -Class Win32_PageFileSetting) | ForEach-Object { $_.Delete() }'

  - type: 'file'
    only: ['virtualbox']
    source: '[[template_dir]]/files/sysprep_unattended.xml'
    destination: 'C:\windows\temp\sysprep_unattended.xml'

  - type: "powershell"
    only: ['virtualbox']
    inline:
      - '$computer = Get-WmiObject -Class Win32_ComputerSystem -EnableAllPrivileges; $computer.AutomaticManagedPagefile = $true; $computer.Put()'

  - type: "powershell"
    only: ['virtualbox']
    environment_vars: ['ADMIN_PWD=[[user `password`]]']
    inline: ['net user "Administrator" "$ENV:ADMIN_PWD"']

packer_windows2012r2_gui_remover:
  - type: "powershell"
    only: ['azure', 'amazon']
    inline: ['Get-WindowsFeature *gui* | Uninstall-WindowsFeature']
  - type: 'windows-restart'
    only: ['azure', 'amazon']

packer_windows_defaults:
  os_type: 'windows'
  timezone: 'Central Standard Time'
  owner_name: 'Packer'
  owner_organization: 'Packer'
  temp_password: '{{ packer_windows_temp_password }}'
  builders:
    all:
      communicator: 'winrm'
      winrm_insecure: true
      winrm_use_ssl: true
      winrm_use_ntlm: true
      winrm_username: 'Administrator'
    azure:
      winrm_username: 'packer'
    virtualbox:
      winrm_password: '{{ packer_windows_temp_password }}'
      guest_additions_mode: 'attach'
      shutdown_command: 'C:\Windows\system32\sysprep\sysprep.exe /unattend:C:\windows\temp\sysprep_unattended.xml /quiet /generalize /oobe /shutdown'
      floppy_files:
        - '[[template_dir]]/{{ packer_windows_unattended_file }}'
        - '[[template_dir]]/files/Enable-WinRM.ps1'
  provisioners:
    initialize: '{{ packer_windows_initialize }}'
    guest_tools: '{{ packer_windows_guest_tools }}'
    cleanup: '{{ packer_windows_cleanup }}'
  variables:
    cpu_count: 4
    memory_size: 4096
    disk_size: 61440
    password: '[[env `password`]]'

packer_windows2012r2:
  image_name: 'Windows Server 2012 R2 SERVERSTANDARD'
  builders:
    amazon-ebs:
      ami_name: 'Windows2012R2CoreBase'
      user_data_file: '[[template_dir]]/{{ packer_windows_user_data_file }}'
      source_ami_filter:
        filters:
          virtualization-type: 'hvm'
          name: '*Windows_Server-2012-R2*English-64Bit-Base*'
          root-device-type: 'ebs'
        most_recent: true
        owners: 'amazon'
    azure:
      os_type: 'Windows'
      managed_image_name: 'Windows2012R2CoreBase'
      managed_image_resource_group_name: 'default'
      image_publisher: 'MicrosoftWindowsServer'
      image_offer: 'WindowsServer'
      image_sku: '2012-R2-Datacenter-smalldisk'
    virtualbox:
      guest_os_type: 'Windows2012_64'
      iso_url: 'http://download.microsoft.com/download/6/2/A/62A76ABB-9990-4EFC-A4FE-C7D698DAEB96/9600.16384.WINBLUE_RTM.130821-1623_X64FRE_SERVER_EVAL_EN-US-IRM_SSS_X64FREE_EN-US_DV5.ISO'
      iso_checksum_type: 'md5'
      iso_checksum: '458ff91f8abc21b75cb544744bf92e6a'

packer_windows2012r2_core:
  image_name: 'Windows Server 2012 R2 SERVERSTANDARDCORE'
  provisioners:
    initialize: '{{ packer_windows_initialize + packer_windows2012r2_gui_remover }}'

packer_image_types:
  Windows2012R2: '{{ packer_windows_defaults | combine(packer_windows2012r2, recursive=True) }}'
  Windows2012R2Core: '{{ packer_windows_defaults | combine(packer_windows2012r2, packer_windows2012r2_core, recursive=True) }}'
